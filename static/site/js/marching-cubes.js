import * as THREE from "three";
import { OrbitControls } from "three/controls/OrbitControls.js";
import { SimplexNoise } from "three/libs/SimplexNoise.js";
import { GUI } from "three/libs/lil-gui.module.min.js";

// stats.js
import Stats from 'three/libs/stats.module.js';

//
// Marching Cubes
//

// 参考
// https://github.com/deep110/terrain-editor-js/blob/master/marching-cubes.js


/*

  ここ重要。
  頂点とエッジのナンバリングは、下記の通りにしておかないと、
  triangulationTableとedgeTableに影響がでてしまう。

  頂点のインデックス

     v4---------v5
    /|         /|
   / |        / |
 v7---------v6  |
  |  v0------|--v1
  | /        | /
  |/         |/
 v3----------v2

  エッジのインデックス

     o--- e4 ---o
   e7|         /|
   / |        e5|
  o--- e6 ---o  |
  |  o-- e0 -|--o
  | e3       | e1
  |/         |/
  o--- e2 ---o

    e0=(v0, v1)
    e1=(v1, v2)
    e2=(v2, v3)
    e3=(v3, v0)

    e4=(v4, v5)
    e5=(v5, v6)
    e6=(v6, v7)
    e7=(v7, v4)

     o--- ------o
    /|         /|
   / 8        / 9
  o----------o  |
  |  o-------|--o
 11 /        10 /
  |/         |/
  o--- ------o

    e8=(v0, v4)
    e9=(v1, v5)
    e10=(v2, v6)
    e11=(v3, v7)

*/



// 三角測量テーブル
// 出典
// https://github.com/deep110/terrain-editor-js/blob/master/marching-cubes.js#L260

// しきい値を超えた頂点のパターンをインデックスとして参照すると、
// どの辺の3点を使ってポリゴンを生成すればよいかが分かる早見表。

// インデックスを二進数にして1が立っている桁の頂点は、しきい値を超えている。

// 一つの箱の中に三角形は最大5個作成される
// 3 * 5 = 15 なので-1でパディングして16桁の配列になっている。
// 左から順に3個ずつ取り出して三角形にして、-1を見つけたらそれ以降は処理しない。

const triangulationTable = [

  /* 0 */[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 1 */[0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 2 */[0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 3 */[1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 4 */[1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 5 */[0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 6 */[9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 7 */[2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1],
  /* 8 */[3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 9 */[0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],

  /* 10 */[1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 11 */[1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 12 */[3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 13 */[0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1],
  /* 14 */[3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1],
  /* 15 */[9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 16 */[4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 17 */[4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 18 */[0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 19 */[4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1],

  /* 20 */[1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 21 */[3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1],
  /* 22 */[9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 23 */[2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1],
  /* 24 */[8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 25 */[11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1],
  /* 26 */[9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 27 */[4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1],
  /* 28 */[3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1],
  /* 29 */[1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1],

  /* 30 */[4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1],
  /* 31 */[4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1],
  /* 32 */[9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 33 */[9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 34 */[0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 35 */[8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1],
  /* 36 */[1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 37 */[3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],
  /* 38 */[5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1],
  /* 39 */[2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1],

  /* 40 */[9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 41 */[0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1],
  /* 42 */[0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 43 */[2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1],
  /* 44 */[10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1],
  /* 45 */[4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1],
  /* 46 */[5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1],
  /* 47 */[5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 48 */[9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 49 */[9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1],

  /* 50 */[0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 51 */[1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 52 */[9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1],
  /* 53 */[10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1],
  /* 54 */[8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1],
  /* 55 */[2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 56 */[7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1],
  /* 57 */[9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1],
  /* 58 */[2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1],
  /* 59 */[11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1],

  /* 60 */[9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1],
  /* 61 */[5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1],
  /* 62 */[11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1],
  /* 63 */[11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 64 */[10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 65 */[0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 66 */[9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 67 */[1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 68 */[1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 69 */[1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1],

  /* 70 */[9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 71 */[5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1],
  /* 72 */[2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 73 */[11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],
  /* 74 */[0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 75 */[5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1],
  /* 76 */[6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1],
  /* 77 */[0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1],
  /* 78 */[3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1],
  /* 79 */[6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1],

  /* 80 */[5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 81 */[4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1],
  /* 82 */[1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 83 */[10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1],
  /* 84 */[6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1],
  /* 85 */[1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1],
  /* 86 */[8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1],
  /* 87 */[7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1],
  /* 88 */[3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1],
  /* 89 */[5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1],

  /* 90 */[0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1],
  /* 91 */[9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1],
  /* 92 */[8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1],
  /* 93 */[5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1],
  /* 94 */[0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1],
  /* 95 */[6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1],
  /* 96 */[10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 97 */[4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1],
  /* 98 */[10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1],
  /* 99 */[8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1],

  /* 100 */[1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1],
  /* 101 */[3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1],
  /* 102 */[0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 103 */[8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 104 */[10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1],
  /* 105 */[0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1],
  /* 106 */[3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1],
  /* 107 */[6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1],
  /* 108 */[9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1],
  /* 109 */[8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1],

  /* 110 */[3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1],
  /* 111 */[6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 112 */[7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1],
  /* 113 */[0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1],
  /* 114 */[10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1],
  /* 115 */[10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1],
  /* 116 */[1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1],
  /* 117 */[2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1],
  /* 118 */[7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1],
  /* 119 */[7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],

  /* 120 */[2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1],
  /* 121 */[2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1],
  /* 122 */[1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1],
  /* 123 */[11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1],
  /* 124 */[8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1],
  /* 125 */[0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 126 */[7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1],
  /* 127 */[7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 128 */[7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 129 */[3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],

  /* 130 */[0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 131 */[8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 132 */[10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 133 */[1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 134 */[2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 135 */[6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1],
  /* 136 */[7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 137 */[7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1],
  /* 138 */[2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1],
  /* 139 */[1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1],

  /* 140 */[10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 141 */[10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1],
  /* 142 */[0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1],
  /* 143 */[7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1],
  /* 144 */[6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 145 */[3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 146 */[8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1],
  /* 147 */[9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1],
  /* 148 */[6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1],
  /* 149 */[1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1],

  /* 150 */[4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1],
  /* 151 */[10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1],
  /* 152 */[8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1],
  /* 153 */[0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 154 */[1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1],
  /* 155 */[1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 156 */[8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1],
  /* 157 */[10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1],
  /* 158 */[4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1],
  /* 159 */[10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],

  /* 160 */[4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 161 */[0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1],
  /* 162 */[5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 163 */[11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1],
  /* 164 */[9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 165 */[6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1],
  /* 166 */[7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1],
  /* 167 */[3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1],
  /* 168 */[7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1],
  /* 169 */[9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1],

  /* 170 */[3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1],
  /* 171 */[6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1],
  /* 172 */[9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1],
  /* 173 */[1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1],
  /* 174 */[4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1],
  /* 175 */[7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1],
  /* 176 */[6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1],
  /* 177 */[3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1],
  /* 178 */[0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1],
  /* 179 */[6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1],

  /* 180 */[1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1],
  /* 181 */[0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1],
  /* 182 */[11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1],
  /* 183 */[6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1],
  /* 184 */[5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1],
  /* 185 */[9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1],
  /* 186 */[1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1],
  /* 187 */[1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 188 */[1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1],
  /* 189 */[10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1],

  /* 190 */[0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 191 */[10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 192 */[11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 193 */[11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1],
  /* 194 */[5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1],
  /* 195 */[10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1],
  /* 196 */[11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1],
  /* 197 */[0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1],
  /* 198 */[9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1],
  /* 199 */[7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1],

  /* 200 */[2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1],
  /* 201 */[8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1],
  /* 202 */[9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1],
  /* 203 */[9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1],
  /* 204 */[1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 205 */[0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1],
  /* 206 */[9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1],
  /* 207 */[9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 208 */[5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1],
  /* 209 */[5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1],

  /* 210 */[0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1],
  /* 211 */[10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1],
  /* 212 */[2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1],
  /* 213 */[0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1],
  /* 214 */[0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1],
  /* 215 */[9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 216 */[2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1],
  /* 217 */[5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1],
  /* 218 */[3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1],
  /* 219 */[5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1],

  /* 220 */[8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1],
  /* 221 */[0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 222 */[8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1],
  /* 223 */[9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 224 */[4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 225 */[0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1],
  /* 226 */[1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1],
  /* 227 */[3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1],
  /* 228 */[4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1],
  /* 229 */[9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1],

  /* 230 */[11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1],
  /* 231 */[11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1],
  /* 232 */[2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1],
  /* 233 */[9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1],
  /* 234 */[3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1],
  /* 235 */[1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 236 */[4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1],
  /* 237 */[4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1],
  /* 238 */[4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 239 */[4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],

  /* 240 */[9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 241 */[3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1],
  /* 242 */[0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1],
  /* 243 */[3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 244 */[1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1],
  /* 245 */[3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1],
  /* 246 */[0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 247 */[3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 248 */[2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1],
  /* 249 */[9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],

  /* 250 */[2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1],
  /* 251 */[1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 252 */[1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 253 */[0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 254 */[0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  /* 255 */[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
];


// エッジテーブル

// しきい値を超えた頂点のパターンをインデックスとして参照すると、
// どの辺上に交点が来るかが分かる早見表。

// 表の見方は三角測量テーブルと同じ。
// インデックスを二進数にして1が立っている桁の頂点は、しきい値を超えている。

// 格納されている値を2進数で表記したとき、各桁はエッジ番号を表している。
// この表を参照すると、どのエッジ上に交点が存在するかわかるので、
// しきい値を超えている度合いに応じて、交点の位置（座標）を特定する。
//
// 実際に3角形のポリゴンを生成するにはどの3点の組み合わせを用いるのか、を知る必要があるが、
// それには別途、三角測量テーブルを参照する必要がある。

// 出典
// https://github.com/deep110/terrain-editor-js/blob/master/marching-cubes.js#L260

const edgeTable = [

  //       5432109876543210
  /* 0 */0b0000000000000000, // 0x0
  /* 1 */0b0000000100001001, // 0x109 e0, e3, e8
  /* 2 */0b0000001000000011, // 0x203 e0, e1, e9
  /* 3 */0b0000001100001010, // 0x30a e1, e3, e8, e9
  /* 4 */0b0000010000000110, // 0x406 e1, e2, e10
  /* 5 */0b0000010100001111, // 0x50f e0, e1, e2, e3, e10
  /* 6 */0b0000011000000101, // 0x605 e0, e2, e9, e10
  /* 7 */0b0000011100001100, // 0x70c e2, e3, e8, e9, e10
  /* 8 */0b0000100000001100, // 0x80c e2, e3, e11
  /* 9 */0b0000100100000101, // 0x905 e0, e2, e8, e11

  //        5432109876543210
  /* 10 */0b0000101000001111, // 0xa0f e0, e1, e2, e3, e9, e11
  /* 11 */0b0000101100000110, // 0xb06 e1, e2, e8, e9, e11
  /* 12 */0b0000110000001010, // 0xc0a e1, e3, e9, e10
  /* 13 */0b0000110100000011, // 0xd03 e0, e1, e8, e10, e11
  /* 14 */0b0000111000001001, // 0xe09 e0, e3, e8, e9, e10
  /* 15 */0b0000111100000000, // 0xf00 e8, e9, e10, e11
  /* 16 */0b0000000110010000, // 0x190 e4, e7, e8
  /* 17 */0b0000000010011001, // 0x99  e0, e3, e4, e7
  /* 18 */0b0000001110010011, // 0x393 e0, e1, e4, e7, e8, e9
  /* 19 */0b0000001010011010, // 0x29a e1 e3 e3 e4 e7 e9

  //        5432109876543210
  /* 20 */0b0000010110010110, // 0x596 e1, e2, e4, e7, e8, e10
  /* 21 */0b0000010010011111, // 0x49f e0, e1, e2, e3, e4, e7, e10
  /* 22 */0b0000011110010101, // 0x795 e0, e2, e4, e7, e8, e9, e10
  /* 23 */0b0000011010011100, // 0x69c e2, e3, e4, e7, e9, e10
  /* 24 */0b0000100110011100, // 0x99c e2, e3, e4, e7, e8, e11
  /* 25 */0b0000100010010101, // 0x895 e0, e2, e4, e7, e11
  /* 26 */0b0000101110011111, // 0xb9f e0, e1, e2, e3, e4, e7, e8, e9, e11
  /* 27 */0b0000101010010110, // 0xa96 e1, e2, e4, e7, e9, e11
  /* 28 */0b0000110110011010, // 0xd9a e1, e3, e4, e7, e8, e10, e11
  /* 29 */0b0000110010010011, // 0xc93 e0, e1, e4, e7, e10, e11

  //        5432109876543210
  /* 30 */0b0000111110011001, // 0xf99 e0, e3, e4, e7, e8, e9, e10, e11
  /* 31 */0b0000111010010000, // 0xe90 e4, e9, e10, e11
  /* 32 */0b0000001000110000, // 0x230 e4, e5, e9
  /* 33 */0b0000001100111001, // 0x339 e0, e3, e4, e5, e8, e9
  /* 34 */0b0000000000110011, // 0x33 e0, e1, e4, e5
  /* 35 */0b0000000100111010, // 0x13a e1, e3, e4, e5, e8
  /* 36 */0b0000011000110110, // 0x636 e1, e2, e4, e5, e9, e10
  /* 37 */0b0000011100111111, // 0x73f e1, e2, e3, e4, e5, e8, e9, e10
  /* 38 */0b0000010000110101, // 0x435 e0, e2, e4, e5, e10
  /* 39 */0b0000010100111100, // 0x53c e2, e3, e4, e5, e8, e10

  //        5432109876543210
  /* 40 */0b0000101000111100, // 0xa3c e2, e3, e4, e5, e9, e11
  /* 41 */0b0000101100110101, // 0xb35 e0, e2, e4, e5, e8, e9, e11
  /* 42 */0b0000100000111111, // 0x83f e0, e1, e2, e3, e4, e5, e11
  /* 43 */0b0000100100110110, // 0x936 e1, e2, e4, e5, e8, e11
  /* 44 */0b0000111000111010, // 0xe3a e1, e3, e4, e5, e9, e10, e11
  /* 45 */0b0000111100110011, // 0xf33 e0, e1, e4, e5, e8, e9, e10, e11
  /* 46 */0b0000110000111001, // 0xc39 e0, e3, e4, e5, e10, e11
  /* 47 */0b0000110100110000, // 0xd30 e4, e5, e8, e10, e11
  /* 48 */0b0000001110100000, // 0x3a0 e5, e7, e8, e9
  /* 49 */0b0000001010101001, // 0x2a9 e0, e3, e5, e7, e9

  //        5432109876543210
  /* 50 */0b0000000110100011, // 0x1a3 e0, e1, e5, e7, e8
  /* 51 */0b0000000010101010, // 0xaa e1, e3, e5, e7
  /* 52 */0b0000011110100110, // 0x7a6 e1, e2, e5, e7, e8, e9, e10
  /* 53 */0b0000011010101111, // 0x6af e0, e1, e2, e3, e5, e7, e9, e10
  /* 54 */0b0000010110100101, // 0x5a5 e0, e2, e5, e7, e8, e10
  /* 55 */0b0000010010101100, // 0x4ac e2, e3, e5, e7, e10
  /* 56 */0b0000101110101100, // 0xbac e2, e3, e5, e7, e8, e9, e11
  /* 57 */0b0000101010100101, // 0xaa5 e0, e2, e5, e7, e9, e11
  /* 58 */0b0000100110101111, // 0x9af e0, e1, e2, e3, e5, e7, e8, e11
  /* 59 */0b0000100010100110, // 0x8a6 e1, e2, e5, e7, e11

  //        5432109876543210
  /* 60 */0b0000111110101010, // 0xfaa e1, e3, e5, e7, e8, e9, e10, e11
  /* 61 */0b0000111010100011, // 0xea3 e0, e1, e5, e7, e9, e10, e11
  /* 62 */0b0000110110101001, // 0xda9 e0, e3, e5, e7, e8, e10, e11
  /* 63 */0b0000110010100000, // 0xca0 e5, e7, e10, e11
  /* 64 */0b0000010001100000, // 0x460 e5, e6, e10
  /* 65 */0b0000010101101001, // 0x569 e0, e3, e5, e6, e8, e10
  /* 66 */0b0000011001100011, // 0x663 e0, e1, e5, e6, e9, e10
  /* 67 */0b0000011101101010, // 0x76a e1, e3, e5, e6, e8, e9, e10
  /* 68 */0b0000000001100110, // 0x66 e1, e2, e5, e6
  /* 69 */0b0000000101101111, // 0x16f e0, e1, e2, e3, e5, e6, e8

  //        5432109876543210
  /* 70 */0b0000001001100101, // 0x265 e0, e2, e5, e6, e9
  /* 71 */0b0000001101101100, // 0x36c e2, e3, e5, e6, e8, e9
  /* 72 */0b0000110001101100, // 0xc6c e2, e3, e5, e6, e10, e11
  /* 73 */0b0000110101100101, // 0xd65 e0, e2, e5, e6, e8, e10, e11
  /* 74 */0b0000111001101111, // 0xe6f e0, e1, e2, e3, e5, e6, e9, e10, e11
  /* 75 */0b0000111101100110, // 0xf66 e1, e2, e5, e6, e8, e9, e10, e11
  /* 76 */0b0000100001101010, // 0x86a e1, e3, e5, e6, e11
  /* 77 */0b0000100101100011, // 0x963 e0, e1, e5, e6, e8, e11
  /* 78 */0b0000101001101001, // 0xa69 e0, e3, e5, e6, e9, e11
  /* 79 */0b0000101101100000, // 0xb60 e5, e6, e8, e9, e11

  //        5432109876543210
  /* 80 */0b0000010111110000, // 0x5f0 e4, e5, e6, e7, e8, e10
  /* 81 */0b0000010011111001, // 0x4f9 e0, e3, e4, e5, e6, e7, e11
  /* 82 */0b0000011111110011, // 0x7f3 e0, e1, e4, e5, e6, e7, e8, e9, e10
  /* 83 */0b0000011011111010, // 0x6fa e1, e3, e4, e5, e6, e7, e9, e10
  /* 84 */0b0000000111110110, // 0x1f6 e1, e2, e4, e5, e6, e7, e8
  /* 85 */0b0000000011111111, // 0xff e0, e1, e2, e3, e4, e5, e6, e7
  /* 86 */0b0000001111110101, // 0x3f5 e0, e2, e4, e5, e6, e7, e8, e9
  /* 87 */0b0000001011111100, // 0x2fc e2, e3, e4, e5, e6, e7, e9
  /* 88 */0b0000110111111100, // 0xdfc e2, e3, e4, e5, e6, e7, e8, e10, e11
  /* 89 */0b0000110011110101, // 0xcf5 e0, e2, e4, e5, e6, e7, e10, e11

  //        5432109876543210
  /* 90 */0b0000111111111111, // 0xfff
  /* 91 */0b0000111011110110, // 0xef6
  /* 92 */0b0000100111111010, // 0x9fa
  /* 93 */0b0000100011110011, // 0x8f3
  /* 94 */0b0000101111111001, // 0xbf9
  /* 95 */0b0000101011110000, // 0xaf0
  /* 96 */0b0000011001010000, // 0x650
  /* 97 */0b0000011101011001, // 0x759
  /* 98 */0b0000010001010011, // 0x453
  /* 99 */0b0000010101011010, // 0x55a

  //         5432109876543210
  /* 100 */0b0000001001010110, // 0x256
  /* 101 */0b0000001101011111, // 0x35f
  /* 102 */0b0000000001010101, // 0x55
  /* 103 */0b0000000101011100, // 0x15c
  /* 104 */0b0000111001011100, // 0xe5c
  /* 105 */0b0000111101010101, // 0xf55
  /* 106 */0b0000110001011111, // 0xc5f
  /* 107 */0b0000110101010110, // 0xd56
  /* 108 */0b0000101001011010, // 0xa5a
  /* 109 */0b0000101101010011, // 0xb53

  //         5432109876543210
  /* 110 */0b0000100001011001, // 0x859
  /* 111 */0b0000100101010000, // 0x950
  /* 112 */0b0000011111000000, // 0x7c0
  /* 113 */0b0000011011001001, // 0x6c9
  /* 114 */0b0000010111000011, // 0x5c3
  /* 115 */0b0000010011001010, // 0x4ca
  /* 116 */0b0000001111000110, // 0x3c6
  /* 117 */0b0000001011001111, // 0x2cf
  /* 118 */0b0000000111000101, // 0x1c5
  /* 119 */0b0000000011001100, // 0xcc

  //         5432109876543210
  /* 120 */0b0000111111001100, // 0xfcc
  /* 121 */0b0000111011000101, // 0xec5
  /* 122 */0b0000110111001111, // 0xdcf
  /* 123 */0b0000110011000110, // 0xcc6
  /* 124 */0b0000101111001010, // 0xbca
  /* 125 */0b0000101011000011, // 0xac3
  /* 126 */0b0000100111001001, // 0x9c9
  /* 127 */0b0000100011000000, // 0x8c0
  /* 128 */0b0000100011000000, // 0x8c0
  /* 129 */0b0000100111001001, // 0x9c9

  //         5432109876543210
  /* 130 */0b0000101011000011, // 0xac3
  /* 131 */0b0000101111001010, // 0xbca
  /* 132 */0b0000110011000110, // 0xcc6
  /* 133 */0b0000110111001111, // 0xdcf
  /* 134 */0b0000111011000101, // 0xec5
  /* 135 */0b0000111111001100, // 0xfcc
  /* 136 */0b0000000011001100, // 0xcc
  /* 137 */0b0000000111000101, // 0x1c5
  /* 138 */0b0000001011001111, // 0x2cf
  /* 139 */0b0000001111000110, // 0x3c6

  //         5432109876543210
  /* 140 */0b0000010011001010, // 0x4ca
  /* 141 */0b0000010111000011, // 0x5c3
  /* 142 */0b0000011011001001, // 0x6c9
  /* 143 */0b0000011111000000, // 0x7c0
  /* 144 */0b0000100101010000, // 0x950
  /* 145 */0b0000100001011001, // 0x859
  /* 146 */0b0000101101010011, // 0xb53
  /* 147 */0b0000101001011010, // 0xa5a
  /* 148 */0b0000110101010110, // 0xd56
  /* 149 */0b0000110001011111, // 0xc5f

  //         5432109876543210
  /* 150 */0b0000111101010101, // 0xf55
  /* 151 */0b0000111001011100, // 0xe5c
  /* 152 */0b0000000101011100, // 0x15c
  /* 153 */0b0000000001010101, // 0x55
  /* 154 */0b0000001101011111, // 0x35f
  /* 155 */0b0000001001010110, // 0x256
  /* 156 */0b0000010101011010, // 0x55a
  /* 157 */0b0000010001010011, // 0x453
  /* 158 */0b0000011101011001, // 0x759
  /* 159 */0b0000011001010000, // 0x650

  //         5432109876543210
  /* 160 */0b0000101011110000, // 0xaf0
  /* 161 */0b0000101111111001, // 0xbf9
  /* 162 */0b0000100011110011, // 0x8f3
  /* 163 */0b0000100111111010, // 0x9fa
  /* 164 */0b0000111011110110, // 0xef6
  /* 165 */0b0000111111111111, // 0xfff
  /* 166 */0b0000110011110101, // 0xcf5
  /* 167 */0b0000110111111100, // 0xdfc
  /* 168 */0b0000001011111100, // 0x2fc
  /* 169 */0b0000001111110101, // 0x3f5

  //         5432109876543210
  /* 170 */0b0000000011111111, // 0xff
  /* 171 */0b0000000111110110, // 0x1f6
  /* 172 */0b0000011011111010, // 0x6fa
  /* 173 */0b0000011111110011, // 0x7f3
  /* 174 */0b0000010011111001, // 0x4f9
  /* 175 */0b0000010111110000, // 0x5f0
  /* 176 */0b0000101101100000, // 0xb60
  /* 177 */0b0000101001101001, // 0xa69
  /* 178 */0b0000100101100011, // 0x963
  /* 179 */0b0000100001101010, // 0x86a

  //         5432109876543210
  /* 180 */0b0000111101100110, // 0xf66
  /* 181 */0b0000111001101111, // 0xe6f
  /* 182 */0b0000110101100101, // 0xd65
  /* 183 */0b0000110001101100, // 0xc6c
  /* 184 */0b0000001101101100, // 0x36c
  /* 185 */0b0000001001100101, // 0x265
  /* 186 */0b0000000101101111, // 0x16f
  /* 187 */0b0000000001100110, // 0x66
  /* 188 */0b0000011101101010, // 0x76a
  /* 189 */0b0000011001100011, // 0x663

  //         5432109876543210
  /* 190 */0b0000010101101001, // 0x569
  /* 191 */0b0000010001100000, // 0x460
  /* 192 */0b0000110010100000, // 0xca0
  /* 193 */0b0000110110101001, // 0xda9
  /* 194 */0b0000111010100011, // 0xea3
  /* 195 */0b0000111110101010, // 0xfaa
  /* 196 */0b0000100010100110, // 0x8a6
  /* 197 */0b0000100110101111, // 0x9af
  /* 198 */0b0000101010100101, // 0xaa5
  /* 199 */0b0000101110101100, // 0xbac

  //         5432109876543210
  /* 200 */0b0000010010101100, // 0x4ac
  /* 201 */0b0000010110100101, // 0x5a5
  /* 202 */0b0000011010101111, // 0x6af
  /* 203 */0b0000011110100110, // 0x7a6
  /* 204 */0b0000000010101010, // 0xaa
  /* 205 */0b0000000110100011, // 0x1a3
  /* 206 */0b0000001010101001, // 0x2a9
  /* 207 */0b0000001110100000, // 0x3a0
  /* 208 */0b0000110100110000, // 0xd30
  /* 209 */0b0000110000111001, // 0xc39

  //         5432109876543210
  /* 210 */0b0000111100110011, // 0xf33
  /* 211 */0b0000111000111010, // 0xe3a
  /* 212 */0b0000100100110110, // 0x936
  /* 213 */0b0000100000111111, // 0x83f
  /* 214 */0b0000101100110101, // 0xb35
  /* 215 */0b0000101000111100, // 0xa3c
  /* 216 */0b0000010100111100, // 0x53c
  /* 217 */0b0000010000110101, // 0x435
  /* 218 */0b0000011100111111, // 0x73f
  /* 219 */0b0000011000110110, // 0x636

  //         5432109876543210
  /* 220 */0b0000000100111010, // 0x13a
  /* 221 */0b0000000000110011, // 0x33
  /* 222 */0b0000001100111001, // 0x339
  /* 223 */0b0000001000110000, // 0x230
  /* 224 */0b0000111010010000, // 0xe90
  /* 225 */0b0000111110011001, // 0xf99
  /* 226 */0b0000110010010011, // 0xc93
  /* 227 */0b0000110110011010, // 0xd9a
  /* 228 */0b0000101010010110, // 0xa96
  /* 229 */0b0000101110011111, // 0xb9f

  //         5432109876543210
  /* 230 */0b0000100010010101, // 0x895
  /* 231 */0b0000100110011100, // 0x99c
  /* 232 */0b0000011010011100, // 0x69c
  /* 233 */0b0000011110010101, // 0x795
  /* 234 */0b0000010010011111, // 0x49f
  /* 235 */0b0000010110010110, // 0x596
  /* 236 */0b0000001010011010, // 0x29a
  /* 237 */0b0000001110010011, // 0x393
  /* 238 */0b0000000010011001, // 0x99
  /* 239 */0b0000000110010000, // 0x190

  //         5432109876543210
  /* 240 */0b0000111100000000, // 0xf00
  /* 241 */0b0000111000001001, // 0xe09
  /* 242 */0b0000110100000011, // 0xd03
  /* 243 */0b0000110000001010, // 0xc0a
  /* 244 */0b0000101100000110, // 0xb06
  /* 245 */0b0000101000001111, // 0xa0f
  /* 246 */0b0000100100000101, // 0x905
  /* 247 */0b0000100000001100, // 0x80c
  /* 248 */0b0000011100001100, // 0x70c
  /* 249 */0b0000011000000101, // 0x605

  //         5432109876543210
  /* 250 */0b0000010100001111, // 0x50f
  /* 251 */0b0000010000000110, // 0x406
  /* 252 */0b0000001100001010, // 0x30a
  /* 253 */0b0000001000000011, // 0x203
  /* 254 */0b0000000100001001, // 0x109
  /* 255 */0b0000000000000000, // 0x0
];




class MarchingCubes {

  xMax;
  yMax;
  zMax;

  sampleSize;

  // Float32Array
  vertices;

  // ボクセルのエッジ上の交点の座標を格納する一時変数
  // 辺の数、すなわちe0~e11までの合計12個のFloat32Array(3)を格納する
  edges = [];

  constructor(xMax, yMax, zMax, sampleSize = 1) {

    this.xMax = xMax;
    this.yMax = yMax;
    this.zMax = zMax;

    this.sampleSize = sampleSize;

    // Float32Arrayは固定長で確保しないといけないので、
    // すべてのボクセルの全ての辺の上に頂点を作る前提でバッファを用意する
    // 実際にはその一部しか使わない
    this.vertices = new Float32Array((this.xMax * 2) * (this.yMax * 2) * (this.zMax * 2) * 12 * 3);

    console.log(`Length of vertices = ${this.vertices.length}`);

    // e0~e11のすべての辺に、Float32Array(3)を格納しておく
    // ここには後ほど交点の座標を格納する
    for (let i = 0; i < 12; i++) {
      this.edges.push(new Float32Array(3));
    }

  }


  generateMesh(geometry, surfaceLevel, terrain) {

    // 結果はgeometryに格納される

    let fI, fJ, fK;

    let x, y, z;

    let vIdx = 0;

    for (let i = -this.xMax; i < this.xMax; i++) {

      // terrainの頂点バッファは0始まりなので、0始まりに変換する
      fI = i + this.xMax;

      // X座標
      x = i * this.sampleSize;

      for (let j = -this.yMax + 1; j < this.yMax - 1; j++) {

        // terrainの頂点バッファは0始まりなので、0始まりに変換する
        fJ = j + this.yMax;

        // Y座標
        y = j * this.sampleSize;

        for (let k = -this.zMax; k < this.zMax; k++) {

          // terrainの頂点バッファは0始まりなので、0始まりに変換する
          fK = k + this.zMax;

          // Z座標
          z = k * this.sampleSize;

          // 起点を左奥として、時計回りに平面を回る
          const v0 = terrain.getField(fI, fJ, fK);
          const v1 = terrain.getField(fI + 1, fJ, fK);
          const v2 = terrain.getField(fI + 1, fJ, fK + 1);
          const v3 = terrain.getField(fI, fJ, fK + 1);

          // 上に移動して、時計回りに平面を回る
          const v4 = terrain.getField(fI, fJ + 1, fK);
          const v5 = terrain.getField(fI + 1, fJ + 1, fK);
          const v6 = terrain.getField(fI + 1, fJ + 1, fK + 1);
          const v7 = terrain.getField(fI, fJ + 1, fK + 1)

          // surfaceLevelを超えた頂点に対応したインデックスを取得
          let cubeIndex = this.getCubeIndex(surfaceLevel, v0, v1, v2, v3, v4, v5, v6, v7);

          // どの辺上に交点が来るのか、edgeTableで調べる
          let edgeIndex = edgeTable[cubeIndex];

          // 交点がなければなにもしない
          if (edgeIndex == 0) {
            continue;
          }

          // グリッドの中央で初期化
          // これをそのまま使うとかなり荒い感じになるので、比率で補間する
          let mu = this.sampleSize / 2;

          // ここの部分は絵を参照すると分かりやすい

          if (edgeIndex & 0b0001) {
            // edgeIndexを2進数で表現したときの桁の部分がエッジ番号に対応するので、
            // この場合はe0で交差する
            // e0=(v0, v1)
            mu = (surfaceLevel - v0) / (v1 - v0);
            this.setFloatArray(
              this.edges[0],
              this.#lerp(x, x + this.sampleSize, mu),
              y,
              z
            );
          }

          // e1=(v1, v2)で交差
          if (edgeIndex & 0b0010) {
            mu = (surfaceLevel - v1) / (v2 - v1);
            this.setFloatArray(
              this.edges[1],
              x + this.sampleSize,
              y,
              this.#lerp(z, z + this.sampleSize, mu)
            );
          }

          // e2=(v2, v3)で交差
          if (edgeIndex & 0b0100) {
            mu = (surfaceLevel - v3) / (v2 - v3);
            this.setFloatArray(
              this.edges[2],
              this.#lerp(x, x + this.sampleSize, mu),
              y,
              z + this.sampleSize
            );
          }

          // e3=(v3, v0)で交差
          if (edgeIndex & 0b1000) {
            mu = (surfaceLevel - v0) / (v3 - v0);
            this.setFloatArray(
              this.edges[3],
              x,
              y,
              this.#lerp(z, z + this.sampleSize, mu)
            );
          }

          // e4=(v4, v5)で交差
          if (edgeIndex & 0b00010000) {
            mu = (surfaceLevel - v4) / (v5 - v4);
            this.setFloatArray(
              this.edges[4],
              this.#lerp(x, x + this.sampleSize, mu),
              y + this.sampleSize,
              z
            );
          }

          // e5=(v5, v6)で交差
          if (edgeIndex & 0b00100000) {
            mu = (surfaceLevel - v5) / (v6 - v5);
            this.setFloatArray(
              this.edges[5],
              x + this.sampleSize,
              y + this.sampleSize,
              this.#lerp(z, z + this.sampleSize, mu)
            );
          }

          // e6=(v6, v7)で交差
          if (edgeIndex & 0b01000000) {
            mu = (surfaceLevel - v7) / (v6 - v7);
            this.setFloatArray(
              this.edges[6],
              this.#lerp(x, x + this.sampleSize, mu),
              y + this.sampleSize,
              z + this.sampleSize
            );
          }

          // e7=(v7, v4)で交差
          if (edgeIndex & 0b10000000) {
            mu = (surfaceLevel - v4) / (v7 - v4);
            this.setFloatArray(
              this.edges[7],
              x,
              y + this.sampleSize,
              this.#lerp(z, z + this.sampleSize, mu)
            );
          }

          // e8=(v0, v4)で交差
          if (edgeIndex & 0b000100000000) {
            mu = (surfaceLevel - v0) / (v4 - v0);
            this.setFloatArray(
              this.edges[8],
              x,
              this.#lerp(y, y + this.sampleSize, mu),
              z
            );
          }

          // e9=(v1, v5)で交差
          if (edgeIndex & 0b001000000000) {
            mu = (surfaceLevel - v1) / (v5 - v1);
            this.setFloatArray(
              this.edges[9],
              x + this.sampleSize,
              this.#lerp(y, y + this.sampleSize, mu),
              z
            );
          }

          // e10=(v2, v6)で交差
          if (edgeIndex & 0b010000000000) {
            mu = (surfaceLevel - v2) / (v6 - v2);
            this.setFloatArray(
              this.edges[10],
              x + this.sampleSize,
              this.#lerp(y, y + this.sampleSize, mu),
              z + this.sampleSize
            );
          }

          // e11=(v3, v7)で交差
          if (edgeIndex & 0b100000000000) {
            mu = (surfaceLevel - v3) / (v7 - v3);
            this.setFloatArray(
              this.edges[11],
              x,
              this.#lerp(y, y + this.sampleSize, mu),
              z + this.sampleSize
            );
          }

          // どの3点を使ってポリゴンを作るか、をtriangulationTableで求める
          const triLen = triangulationTable[cubeIndex];

          for (let i = 0; i < triLen.length; i++) {
            // -1を見つけたら終了
            if (triLen[i] === -1) {
              break;
            }
            const edgeIndex = triLen[i];
            const pos = this.edges[edgeIndex];
            this.vertices[vIdx] = pos[0];
            this.vertices[vIdx + 1] = pos[1];
            this.vertices[vIdx + 2] = pos[2];
            vIdx += 3;
          }
        }
      }
    }

    console.log(`vIdx = ${vIdx}`);

    geometry.setAttribute('position', new THREE.BufferAttribute(this.vertices.slice(0, vIdx), 3));
    geometry.computeVertexNormals();
    geometry.attributes.position.needsUpdate = true;
    geometry.attributes.normal.needsUpdate = true;
  }

  getCubeIndex(isoLevel, v0, v1, v2, v3, v4, v5, v6, v7) {
    let cubeIndex = 0;

    if (v0 < isoLevel) cubeIndex |= 0b00000001;
    if (v1 < isoLevel) cubeIndex |= 0b00000010;
    if (v2 < isoLevel) cubeIndex |= 0b00000100;
    if (v3 < isoLevel) cubeIndex |= 0b00001000;
    if (v4 < isoLevel) cubeIndex |= 0b00010000;
    if (v5 < isoLevel) cubeIndex |= 0b00100000;
    if (v6 < isoLevel) cubeIndex |= 0b01000000;
    if (v7 < isoLevel) cubeIndex |= 0b10000000;

    return cubeIndex;
  }

  setFloatArray(arr, x, y, z) {
    arr[0] = x;
    arr[1] = y;
    arr[2] = z;
  }

  #lerp(start, end, amt) {
    return (1 - amt) * start + amt * end;
  }
}


const ISO_LEVEL = 0;
const WIDTH = 80;
const HEIGHT = 40;
const DEPTH = 80;
// const SAMPLE_SIZE = 15;
const SAMPLE_SIZE = 1;

class Terrain {

  xMax;
  yMax;
  zMax;

  xMax2;
  yMax2;
  zMax2;

  sampleSize;

  fieldBuffer;

  geometry;
  material;
  mesh;

  marchingCubes;

  constructor(width, height, depth, sampleSize) {

    this.xMax = Math.floor((width / sampleSize) / 2);

    this.yMax = Math.floor((height / sampleSize) / 2);

    this.zMax = Math.floor((depth / sampleSize) / 2);

    this.sampleSize = sampleSize;

    /*

     |<--------- width ---------->|
                   |
    |--------------+--------------|
    -2/width       0              2/width


     ----|----|----+----|----|----|
         |<-->|
     width / sampleSize


    |----|----|----+----|----|----|
    -xMax... -1    0    1    2... xMax


                   |<---------- xMax2 ---------->|
    ---------------+----|----|----|----|----|----|
                   0                             xMax2

    */

    this.xMax2 = 2 * this.xMax;
    this.yMax2 = 2 * this.yMax;
    this.zMax2 = 2 * this.zMax;

    console.log(`width=${width}, sampleSize=${sampleSize}`);
    console.log(`xMax=${this.xMax}, xMax2=${this.xMax2}`);
    console.log(`yMax=${this.yMax}, yMax2=${this.yMax2}`);
    console.log(`zMax=${this.zMax}, zMax2=${this.zMax2}`);

    // ボクセルを立方体状に積み上げたバッファ
    this.fieldBuffer = new Float32Array((this.xMax + 1) * 2 * (this.yMax + 1) * 2 * (this.zMax + 1) * 2);

    // 注意
    // 必要なバッファは3乗に比例するので、むやみに大きくできない
    console.log(`length of fieldBuffer=${this.fieldBuffer.length}`);

    // バッファジオメトリ
    this.geometry = new THREE.BufferGeometry();

    // マテリアル
    this.material = new THREE.MeshStandardMaterial({
      color: 0xffffff
    });

    // メッシュ化
    this.mesh = new THREE.Mesh(this.geometry, this.material);

    // this.fieldBufferに値を入れる
    this.generateHeightField();

    // MarchingCubesクラスをインスタンス化
    this.marchingCubes = new MarchingCubes(this.xMax, this.yMax, this.zMax, sampleSize);

    // メッシュを作成
    this.marchingCubes.generateMesh(this.geometry, ISO_LEVEL, this);
  }

  //
  // getIndex(x, y, z)  x, y, zの値を一次元の配列に格納するときにインデックスを求める関数
  // getCoordinates(index)  格納されているインデックスから元のx, y, zを求める関数
  //

  __getIndex(i, j, k) {
    // これが元の実装だけど、これは間違っていて、
    return i * this.xMax2 * this.zMax2 + j + k * this.zMax2;
  }

  _getIndex(i, j, k) {
    // これが正しい
    return i * (this.yMax2 + 1) * (this.zMax2 + 1) + j + k * (this.yMax2 + 1);
  }

  getIndex(i, j, k) {
    // でも、この方が分かりやすいので、これを採用する。

    // X軸方向に一つずつ積み上げて(xMax2 + 1)に到達したら
    // Y軸に一つずらして、またX軸を積み上げて、
    // XY平面が埋まったら、Z軸方向に一つずらす
    return i + j * (this.xMax2 + 1) + k * (this.xMax2 + 1) * (this.yMax2 + 1);
  }

  getCoordinates(index) {
    // getIndexの逆演算
    // getIndex(i, j, k)で求めた一次元バッファのインデックス値から元の[i, j, k]を求める
    const i = index % (this.xMax2 + 1);
    const j = Math.floor(index / (this.xMax2 + 1)) % (this.yMax2 + 1);
    const k = Math.floor(index / ((this.xMax2 + 1) * (this.yMax2 + 1)));
    return [i, j, k];
  }

  setField(i, j, k, amt) {
    const index = this.getIndex(i, j, k);
    // console.log(`(${i}, ${j}, ${k}), ${index}`);
    // console.log(`${this.getCoordinates(index)}`);
    this.fieldBuffer[index] = amt;
  }

  getField(i, j, k) {
    const index = this.getIndex(i, j, k);
    return this.fieldBuffer[index];
  }

  getMesh() {
    return this.mesh;
  }

  generateHeightField() {

    for (let i = -this.xMax; i < this.xMax + 1; i++) {
      // xはボクセルのX方向の位置
      let x = i * this.sampleSize;

      for (let j = -this.yMax; j < this.yMax + 1; j++) {
        // yはボクセルのY方向の位置
        let y = j * this.sampleSize;

        for (let k = -this.zMax; k < this.zMax + 1; k++) {
          // zはボクセルのZ方向の位置
          let z = k * this.sampleSize;

          // ノイズを乗せた値を決める
          const height = this.heightValue(x, y, z);

          // バッファは0始まりなので、格納位置に気をつけないといけない
          // i, j, k はマイナス始まりなので、ゼロ始まりに戻す
          const xIndex = i + this.xMax;
          const yIndex = j + this.yMax;
          const zIndex = k + this.zMax;

          this.setField(xIndex, yIndex, zIndex, height);

        }
      }
    }
  }


  // ノイズ生成
  simplex = new SimplexNoise();

  heightValue(x, y, z) {
    // X、Zを入力に加えることで、XZ平面に綺麗な波を作る
    const noise = this.simplex.noise(x * 0.05, z * 0.05) * 10;
    return y + noise;
  }


}


export class Main {

  container;

  sizes = {
    width: 0,
    height: 0
  }

  scene;
  camera;
  renderer;
  controller;
  statsjs;

  renderParams = {
    clock: new THREE.Clock(),
    delta: 0,
    interval: 1 / 30,  // = 30fps
  }

  params = {
    gridSize: 10,
    gridNums: { x: 50, y: 50 },
    threshold: 0.4,
  }


  constructor(params) {

    params = params || {};
    this.params = Object.assign(this.params, params);

    // scene, camera, renderer, controllerを初期化
    this.initThreejs();

    // stats.jsを初期化
    this.initStatsjs();

    // Terrainクラスをインスタンス化して、
    const terrain = new Terrain(WIDTH, HEIGHT, DEPTH, SAMPLE_SIZE);

    // メッシュをシーンに追加
    const mesh = terrain.getMesh();
    this.scene.add(mesh);

    // リサイズイベント
    window.addEventListener("resize", () => { this.onWindowResize(); }, false);

    // フレーム毎の処理(requestAnimationFrameで再帰的に呼び出される)
    this.render();
  }


  initThreejs() {
    // コンテナ
    this.container = document.getElementById("threejsContainer");

    // コンテナのサイズ
    this.sizes.width = this.container.clientWidth;
    this.sizes.height = this.container.clientHeight;

    // シーン
    this.scene = new THREE.Scene();

    // 背景色
    this.scene.background = new THREE.Color("#3a3a3a");

    // カメラ
    this.camera = new THREE.PerspectiveCamera(
      60,
      this.sizes.width / this.sizes.height,
      1,
      1001
    );
    this.camera.position.set(80, 80, 80);

    // レンダラ
    this.renderer = new THREE.WebGLRenderer({ antialias: true });
    this.renderer.setSize(this.sizes.width, this.sizes.height);
    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    this.container.appendChild(this.renderer.domElement);

    // コントローラ
    this.controller = new OrbitControls(this.camera, this.renderer.domElement);

    // 更新するものがないなら、this.render()は呼ばずに、こうするだけでよい
    // this.controller.addEventListener('change', () => { this.renderer.render(this.scene, this.camera); });

    // グリッドヘルパー
    // this.scene.add(new THREE.GridHelper(100, 100, new THREE.Color(0xffffff), new THREE.Color(0xffffff)));

    // 軸表示
    //
    //   Y(green)
    //    |
    //    +---- X(red)
    //   /
    //  Z(blue)
    //
    this.scene.add(new THREE.AxesHelper(100));

    // ディレクショナルライト
    const directionalLight = new THREE.DirectionalLight(0xFFFFFF, 0.5);
    directionalLight.position.set(-5, 2, 10);
    this.scene.add(directionalLight);

    // 環境光
    this.scene.add(new THREE.AmbientLight(0xffffff, 0.5));

    // lil-gui
    const guiContainer = document.getElementById("guiContainer");
    const gui = new GUI({
      container: guiContainer,
    });

    gui
      .add(this.params, "threshold")
      .min(0.1)
      .max(0.6)
      .step(0.01)
      .name("threshold");
  }


  initStatsjs() {
    let container = document.getElementById("statsjsContainer");
    if (!container) {
      container = document.createElement("div");
      container.id = "statsjsContainer";
      this.container.appendChild(container);
    }

    this.statsjs = new Stats();
    this.statsjs.dom.style.position = "relative";
    this.statsjs.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
    container.appendChild(this.statsjs.dom);
  }


  render() {
    // 再帰処理
    requestAnimationFrame(() => { this.render(); });

    this.renderParams.delta += this.renderParams.clock.getDelta();
    if (this.renderParams.delta < this.renderParams.interval) {
      return;
    }

    {
      // stats.jsを更新
      this.statsjs.update();

      // カメラコントローラーの更新
      this.controller.update();

      // 再描画
      this.renderer.render(this.scene, this.camera);
    }

    this.renderParams.delta %= this.renderParams.interval;
  }

  onWindowResize() {
    this.sizes.width = this.container.clientWidth;
    this.sizes.height = this.container.clientHeight;

    this.camera.aspect = this.sizes.width / this.sizes.height;
    this.camera.updateProjectionMatrix();

    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    this.renderer.setSize(this.sizes.width, this.sizes.height);
  }

}
